class Solution {
    public int longestStrChain(String[] words) {
            int n=words.length;
        
        Arrays.sort(words, new java.util.Comparator<String>(){
            @Override
            public int compare(String s1, String s2)
            {
                return s1.length()-s2.length();
            }
        });
        int[] dp=new int[n];

        for(int k=0;k<n;k++)
        {
            dp[k]=1;
            
        }

        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(words[j].length()+1 == words[i].length())
                {
                    if(comPiece(words[j],words[i])){
                        dp[i]=Math.max(dp[i],dp[j]+1);
                    }
                }

            }
        }

        

        
        int max=0;
        for(int m=0;m<n;m++) {
            if(dp[m]>max) {
                max=dp[m];
            }
        }
        return max;
    }
    
    
  public static boolean comPiece(String str1,String str2)
    {
        char[] firstStringChar = str1.toCharArray();
        char[] secondStringChar = str2.toCharArray();

        

        int pos=-1;
        int count=0;
        for(int i=0;i<str1.length();i++)
        {
            for(int j=0;j<str2.length();j++)
            {
                if(firstStringChar[i]==secondStringChar[j] && j>pos)
                {
                    count++;
                    pos=j;
                    break;
                }
            }
        }
        

        if(count==str1.length())
            return true;
        else
            return false;

    }
}
